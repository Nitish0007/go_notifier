services:
  notifier_db:
    image: postgres:17
    platform: linux/amd64
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: notifier_dev_db
    healthcheck: # Wait for db_service to start, before making connection with db
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5

  notifier_redis:
    image: redis:7-alpine
    platform: linux/amd64
    ports: 
      - "6379:6379"
    volumes:
      - redis_data:/data
  
  notifier_rbmq:
    image: rabbitmq:4.1.1-alpine
    platform: linux/amd64
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    command: >
      sh -c "rabbitmq-plugins enable rabbitmq_management && 
            rabbitmq-server"

  notifier_migrate: # its a one-time run container, and should be exited with code 0 for successful executions of migrations
    image: migrate/migrate # official image provided by golang-migrate maintainers
    volumes:
      - ./db/migrations:/migrations
    environment:
      DATABASE_URL: postgres://postgres:12345678@notifier_db:5432/notifier_dev_db?sslmode=disable
    command:
      [
        "-path", "/migrations",
        "-database", "postgres://postgres:12345678@notifier_db:5432/notifier_dev_db?sslmode=disable",
        "up"
      ]
    depends_on:
      notifier_db:
        condition: service_healthy

  notifier-api:
    platform: linux/amd64
    # image: go-notifier-api:latest
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      # - ./.air.toml:/app/.air.toml:ro # ro here is for read-only to prevent overwriting of this file
      - ./configs:/app/configs
      - postgres_data:/var/lib/postgresql/data
      - redis_data:/data
    environment:
      ENV: development
    command: 
      [
        "go", "run", "./cmd/server/main.go"
      ]
      # to run already build binary 
      # [
      #   "./server"
      # ]
    depends_on:
      notifier_db:
        condition: service_healthy # wait for health check
      notifier_redis:
        condition: service_started
      notifier_rbmq:
        condition: service_started

  notifier-workers:
    platform: linux/amd64
    # image: go-notifier-workers:latest # require docker login to pull the image
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app
      - ./configs:/app/configs
      - postgres_data:/var/lib/postgresql/data
      - redis_data:/data
    environment:
      ENV: development
    depends_on:
      notifier_db:
        condition: service_healthy # wait for health check
      notifier_redis:
        condition: service_started
      notifier-api:
        condition: service_started
      notifier_rbmq:
        condition: service_started
    command:
      [
        "go", "run", "./cmd/workers/main.go"
      ]
      # to run already build binary 
      # [
      #   "./workers"
      # ]

volumes:
  postgres_data:
  redis_data:

